{"version":3,"sources":["js/app.js"],"names":["canvas","document","querySelector","ctx","getContext","width","window","innerWidth","height","innerHeight","strokeStyle","lineJoin","lineCap","lineWidth","isDrawing","lastX","lastY","hue","direction","draw","e","beginPath","moveTo","lineTo","offsetX","offsetY","stroke","addEventListener"],"mappings":";;AAAA,CAAC,YAAU;;AAEX;;;;;AAKA;AACA;AACA;;AAEE;;;;AAIE,MAAMA,SAASC,SAASC,aAAT,CAAuB,OAAvB,CAAf;AACA,MAAMC,MAASH,OAAOI,UAAP,CAAkB,IAAlB,CAAf;;AAEA;;;AAGAJ,SAAOK,KAAP,GAAmBC,OAAOC,UAA1B;AACC;;;AAGDP,SAAOQ,MAAP,GAAmBF,OAAOG,WAA1B;AACA;;;;;AAKAN,MAAIO,WAAJ,GAAmB,SAAnB;AACA;;;;;;;;;;;;;AAaAP,MAAIQ,QAAJ,GAAmB,OAAnB;AACA;;;;;;;;;;;;;;;;AAgBAR,MAAIS,OAAJ,GAAmB,OAAnB;AACA;;;;;;;;;;;;AAYAT,MAAIU,SAAJ,GAAmB,EAAnB;;AAEA;;;;;;;;;;;;;;;;;;;;;;AAsBA,MAAIC,YAAY,KAAhB;AAAA,MACAC,QAAY,CADZ;AAAA,MAEAC,QAAY,CAFZ;AAAA,MAGAC,MAAY,CAHZ;AAAA,MAIAC,YAAY,IAJZ;;AAMA;;;;;;;AAOA,WAASC,IAAT,CAAcC,CAAd,EAAgB;AACZ;;;;;;AAMA,QAAG,CAACN,SAAJ,EAAe;AACf;;;;;;;;AAQAX,QAAIO,WAAJ,YAAyBO,GAAzB;AACA;;;;;;;;;AASAd,QAAIkB,SAAJ;AACA;;;;;;;AAOA;AACAlB,QAAImB,MAAJ,CAAWP,KAAX,EAAkBC,KAAlB;AACA;;;;;;;AAOA;AACAb,QAAIoB,MAAJ,CAAWH,EAAEI,OAAb,EAAsBJ,EAAEK,OAAxB;AACA;;;;;;;AAOAtB,QAAIuB,MAAJ;AACA;;;;;;;;;;;;;;AAcA;;;;;;AAnEY,eAiEK,CAACN,EAAEI,OAAH,EAAYJ,EAAEK,OAAd,CAjEL;AAiEXV,SAjEW;AAiEJC,SAjEI;AAyEZC;AACA;;;;;;;;;AASA,QAAGA,OAAO,GAAV,EAAc;AACZA,YAAM,CAAN;AACD;;AAED;;;;;;;;AAQA,QAAGd,IAAIU,SAAJ,IAAiB,GAAjB,IAAwBV,IAAIU,SAAJ,IAAiB,CAA5C,EAA8C;AAC5CK,kBAAY,CAACA,SAAb;AACD;;AAED;;;;;;;;AAQA,QAAGA,SAAH,EAAa;AACXf,UAAIU,SAAJ;AACH,KAFC,MAEG;AACDV,UAAIU,SAAJ;AACF;AAED;;AAED;;;;;;;;;;;;;;;;AAgBAb,SAAO2B,gBAAP,CAAwB,WAAxB,EAAqC,UAACP,CAAD,EAAO;AAC1CN,gBAAY,IAAZ;AAD0C,gBAEzB,CAACM,EAAEI,OAAH,EAAYJ,EAAEK,OAAd,CAFyB;AAEzCV,SAFyC;AAElCC,SAFkC;AAG3C,GAHD;;AAKA;;;;;;AAMAhB,SAAO2B,gBAAP,CAAwB,WAAxB,EAAqCR,IAArC;AACA;;;;;;;;AAQAnB,SAAO2B,gBAAP,CAAwB,WAAxB,EAAqC;AAAA,WAAMb,YAAY,IAAlB;AAAA,GAArC;AACA;;;;;;;;AAQAd,SAAO2B,gBAAP,CAAwB,SAAxB,EAAmC;AAAA,WAAMb,YAAY,KAAlB;AAAA,GAAnC;AACA;;;;;;;;AAQAd,SAAO2B,gBAAP,CAAwB,UAAxB,EAAoC;AAAA,WAAMb,YAAY,KAAlB;AAAA,GAApC;;AAEF;AACA;AACA;AACA;AACA;;AAEE;AACA;;;;;;AAMF;AACA;AACA;AACA;;AAGD,CA9SH","file":"all.js","sourcesContent":["(function(){\r\n\r\n/**\r\n * Adding the size of the progress bar\r\n * @function\r\n * @callback\r\n */\r\n// document.querySelector('#progressBar').addEventListener('mdl-componentupgraded', function() {\r\n//     this.MaterialProgress.setProgress(100);\r\n//   });\r\n\r\n  /**\r\n   * @param {string} canvas - take elem <canvas></canvas>\r\n   * @param {object} ctx Render content (context)\r\n   */\r\n    const canvas = document.querySelector('#draw');\r\n    const ctx    = canvas.getContext('2d');\r\n    \r\n    /**\r\n     * @param {number} canvas.width Get the full width of the screen\r\n     */\r\n    canvas.width     = window.innerWidth;\r\n     /**\r\n     * @param {number} canvas.height Get the full height of the screen\r\n     */\r\n    canvas.height    = window.innerHeight;\r\n    /**\r\n     * @param {string} ctx.strokeStyle \r\n     * RU: Цвет прямоугольного контура.\r\n     * ENG:Color a rectangular contour.\r\n     */\r\n    ctx.strokeStyle  = '#bada55';\r\n    /**\r\n     * @param {string} ctx.lineJoin \r\n     * RU:Свойство lineJoin определяет, как соединяются \r\n     * два соединительных сегмента (линий, дуг или кривых) \r\n     * с ненулевой длиной в форме (вырожденные сегменты с нулевой длиной, \r\n     * заданные конечные точки и контрольные точки находятся точно в одном \r\n     * и том же положении, пропущены).\r\n     * https://developer.mozilla.org/ru/docs/Web/API/Canvas_API/Tutorial/Применение_стилей_и_цветов\r\n     * -------------------------------------\r\n     * ENG: The lineJoin property determines how \r\n     * two connecting segments (of lines, arcs or curves) with non-zero lengths \r\n     * in a shape are joined together (degenerate segments with zero lengths, .\r\n     */\r\n    ctx.lineJoin     = 'round';\r\n    /**\r\n     * @param {string} ctx.lineCap  \r\n     * RU: Свойство lineCap определяет, \r\n     * как выводятся конечные точки каждой строки.\r\n     * Для этого свойства есть \r\n     * три возможных значения: butt, round и square. \r\n     * По умолчанию для этого свойства установлено значение butt.\r\n     * https://developer.mozilla.org/ru/docs/Web/API/Canvas_API/Tutorial/Применение_стилей_и_цветов\r\n     * ----------------\r\n     * ENG:The lineCap property determines how the end \r\n     * points of every line are drawn. \r\n     * There are three possible values for this property and \r\n     * those are: butt, round and square. \r\n     * By default this property is set to butt.\r\n     * \r\n     */\r\n    ctx.lineCap      = 'round';\r\n    /**\r\n     * @param {number} ctx.lineWidth  \r\n     * RU: Это свойство задает толщину текущей строки. \r\n     * Значения должны быть положительными. \r\n     * По умолчанию для этого значения установлено 1.0 единицы.\r\n     * https://developer.mozilla.org/ru/docs/Web/API/Canvas_API/Tutorial/Применение_стилей_и_цветов\r\n     * ----------------\r\n     * ENG: This property sets the current line thickness. \r\n     * Values must be positive numbers.\r\n     * By default this value is set to 1.0 units.\r\n     * \r\n     */\r\n    ctx.lineWidth    = 10;\r\n    \r\n    /**\r\n     * @param {boolean} isDrawing\r\n     * RU: Если кнопка мыши нажата и мы можем рисовать, то true, а иначе false\r\n     * ----------------\r\n     * ENG: If the mouse button is clicked and we can draw, then true, otherwise false\r\n     * @param {number} lastX \r\n     * RU: Определяем положение по x\r\n     * ----------------\r\n     * ENG: Determine the position of x\r\n     * @param {number} lastY \r\n     * RU: Определяем положение по y\r\n     * ----------------\r\n     * ENG: Determine the position of y\r\n     * @param {number} hue \r\n     * RU: Оттенок\r\n     * ----------------\r\n     * ENG: Hue\r\n     * @param {boolean} direction\r\n     * RU: Напраление по координате изначально true\r\n     * ----------------\r\n     * ENG: The coordinate direction is initially true\r\n     */\r\n    let isDrawing = false,\r\n    lastX     = 0,\r\n    lastY     = 0,\r\n    hue       = 0,\r\n    direction = true;\r\n\r\n    /**\r\n     * @constructor\r\n     * @param {number} \r\n     * RU: Функция для вырисовывания, которая принимает число (координаты по x и y)\r\n     * ----------------\r\n     * ENG: A function for drawing that takes a number (x and y coordinates)\r\n     */\r\n    function draw(e){\r\n        /**\r\n         * @returns\r\n         * RU: Если isDrawing === false - то выходим из функции\r\n         * ----------------\r\n         * ENG: If isDrawing === false, then we exit the function\r\n         */\r\n        if(!isDrawing) return;\r\n        /**\r\n         * @param {string} ctx.strokeStyle\r\n         * RU: Hsl - это формат цвета, при движении мыши переменная hue увеличивается\r\n         * и соотвественно за счёт чего цвет меняется\r\n         * ----------------\r\n         * ENG: Hsl is a color format, when the mouse moves, the variable hue increases\r\n          * and, as a result, the color changes\r\n         */\r\n        ctx.strokeStyle = `hsl(${hue}, 100%, 50%)`;\r\n        /**\r\n         * @function beginPath\r\n         * RU: Создает новый контур. После создания используется \r\n         * в дальнейшем командами рисования при построении контуров.\r\n         * https://developer.mozilla.org/ru/docs/Web/API/Canvas_API/Tutorial/Рисование_фигур\r\n         * ----------------\r\n         * ENG: Creates a new path. After the creation is used\r\n          * In the future, drawing commands when building contours.\r\n         */\r\n        ctx.beginPath();\r\n        /**\r\n         * @function moveTo\r\n         * RU: Перемещает перо в точку с координатами x и y.\r\n         * https://developer.mozilla.org/ru/docs/Web/API/Canvas_API/Tutorial/Рисование_фигур\r\n         * ----------------\r\n         * ENG: Moves the pen to a point with the coordinates x and y.\r\n         */\r\n        //start from\r\n        ctx.moveTo(lastX, lastY);\r\n        /**\r\n         * @function lineTo\r\n         * RU: Рисует линию с текущей позиции до позиции, определенной x и y\r\n         * https://developer.mozilla.org/ru/docs/Web/API/Canvas_API/Tutorial/Рисование_фигур\r\n         * ----------------\r\n         * ENG: Draws a line from the current position to the position defined by x and y\r\n         */\r\n        //go to\r\n        ctx.lineTo(e.offsetX, e.offsetY);\r\n        /**\r\n         * @function lineTo\r\n         * RU: Рисует фигуру с внешней обводкой.\r\n         * https://developer.mozilla.org/ru/docs/Web/API/Canvas_API/Tutorial/Рисование_фигур\r\n         * ----------------\r\n         * ENG: Draws a shape with an outer stroke.\r\n         */\r\n        ctx.stroke();\r\n        /**\r\n         * @param {number} lastX = e.offsetX \r\n         * @param {number} lastY = e.offsetY\r\n         * @param {number} e.offsetX \r\n         * RU: Координаты по X\r\n         * ----------------\r\n         * ENG: Coordinates of X\r\n         * @param {number} e.offsetY\r\n         * * RU: Координаты по Y\r\n         * ----------------\r\n         * ENG: Coordinates of Y\r\n         */\r\n        [lastX, lastY] = [e.offsetX, e.offsetY];\r\n        \r\n        /**\r\n         * @param hue\r\n         * RU: Увеличиваем оттенок - за счёт чего меняется цвет в hsl формате\r\n         * ----------------\r\n         * ENG: Increase the hue - due to what changes the color in the hsl format\r\n         */\r\n        hue++;\r\n        /**\r\n         * @returns hue\r\n         * RU: Если hue больше, либо равно 360, то \r\n         * мы перебрасываем его обратно на ноль и начинаем инкрементировать\r\n         * снова\r\n         * ----------------\r\n         * ENG: If the hue is greater than or equal to 360, then\r\n          * we reset it back to zero and start incrementing\r\n         */\r\n        if(hue >= 360){\r\n          hue = 0;\r\n        }\r\n\r\n        /**\r\n         * @returns direction\r\n         * RU: если толщина строки больше или равно 10,\r\n         *  или меньше или равно, то мы direction меняем на false значение\r\n         * --------------\r\n         * if the line thickness is greater than or equal to 10,\r\n         * or less or equal, then we change the direction to false\r\n         */\r\n        if(ctx.lineWidth >= 100 || ctx.lineWidth <= 1){\r\n          direction = !direction;\r\n        }\r\n        \r\n        /**\r\n         * @returns ctx.lineWidth++;\r\n         * RU: Если direction === true, то мы увеличиваем толщину, а если\r\n         * direction === false то мы уменьшаем толщину\r\n         * --------------\r\n         * ENG: If direction === true, then we increase the thickness, and if\r\n         * direction === false then we reduce the thickness\r\n         */\r\n        if(direction){\r\n          ctx.lineWidth++;\r\n      }else{\r\n          ctx.lineWidth--;\r\n       }\r\n        \r\n      }\r\n\r\n      /**\r\n       * @event canvas\r\n       * RU: При нажатии на левую кнопку мыши, мы меняем\r\n       * переменную isDrawing на true, за счёт чего функция продолжает\r\n       * свою работу.\r\n       * Далее присваиваем координаты к переменным lastX и lastY, за счёт\r\n       * чего ctx.moveTo(lastX, lastY); срабатывает и функция moveTo рисует\r\n       * с начала этой позиции\r\n       * --------------\r\n       * ENG: When you click on the left mouse button, we change\r\n       * The variable isDrawing to true, due to what the function continues\r\n       * my job.\r\n       * Next, assign coordinates to variables lastX and lastY, at the cost of\r\n       * what is ctx.moveTo (lastX, lastY); triggers and the moveTo function draws\r\n       * from the beginning of this position\r\n       */\r\n      canvas.addEventListener('mousedown', (e) => {\r\n        isDrawing = true;\r\n        [lastX, lastY] = [e.offsetX, e.offsetY];\r\n      });\r\n                    \r\n      /**\r\n       * @event draw\r\n       * RU: При движении мыши мы выполняем функции draw\r\n       * --------------\r\n       * ENG: When the mouse moves, we perform the functions draw\r\n       */\r\n      canvas.addEventListener('mousemove', draw);\r\n      /**\r\n       * @event arrowFunc\r\n       * RU: После вызова функции мы снова присваиваем переменной\r\n       * значение true\r\n       * --------------\r\n       * ENG: After calling the function, we assign the variable again\r\n       * true\r\n       */\r\n      canvas.addEventListener('mousedown', () => isDrawing = true);\r\n      /**\r\n       * @event arrowFunc\r\n       * RU: Когда мы отпустили левую кнопку мыши переменной\r\n       * isDrawing присваивается значение false и работа draw функции прекращается\r\n       * --------------\r\n       * ENG: When we released the left mouse button of the variable\r\n       * isDrawing is set to false and the work of the draw function is terminated\r\n       */\r\n      canvas.addEventListener('mouseup', () => isDrawing = false);\r\n      /**\r\n       * @event arrowFunc\r\n       * RU: Если мышь вышла за пределы canvas, то переменной\r\n       * isDrawing присваивается значение false и работа draw функции прекращается\r\n       * --------------\r\n       * ENG: If the mouse went beyond the canvas, then the variable\r\n        * isDrawing is set to false and the work of the draw function is terminated\r\n       */\r\n      canvas.addEventListener('mouseout', () => isDrawing = false);\r\n      \r\n    //   MylineWidth.oninput = () => {\r\n    //     let currentVal = this.value.trim();\r\n    //       if(currentVal) return ctx.lineWidth = currentVal;\r\n    //     console.log(currentVal);\r\n    //   }\r\n      \r\n      //If we want change color in manual\r\n      /*MyColorStroke.oninput = function() {\r\n        let currentVal = this.value;\r\n          if(currentVal) return ctx.strokeStyle  = currentVal;\r\n        console.log(currentVal);\r\n      }*/\r\n      \r\n    //   MySelect.onchange = () => {\r\n    //      let lineJoinValue = document.getElementById(\"MySelect\").value;\r\n    //     ctx.lineCap   = lineJoinValue;\r\n    //   }\r\n\r\n\r\n  })()"]}